package mygo

import (
	"bytes"
	"crypto/md5"
	"fmt"
	_ "github.com/ivanxwwu/mygo/sample"
	"testing"
)

type A struct {
	M  map[string]*bytes.Buffer
}

var a1 string = `
// Package NFA comment
// This file was generated by trpc4tars 2.0
// Generated from a.jce
package NFA


import (
	"fmt"

	"git.code.oa.com/jce/jce"

)

	// Reference imports to suppress errors if they are not otherwise used.
	var _ = fmt.Errorf
	var _ = jce.Marshal

// SA struct implement
type SA struct {
	A int32
}
func (st *SA) MakesureNotNil() {
}
func (st *SA) ResetDefault() {
st.MakesureNotNil()
}
// ReadFrom reads  from _is and put into struct.
func (st *SA) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()


err = _is.Read_int32(&st.A, 0, false)
if err != nil {
  return err
  }


	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}
//ReadBlock reads struct from the given tag , require or optional.
func (st *SA) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SA, but not exist. tag %d", tag)
		}
		return nil
	}

  	err = st.ReadFrom(_is)
  	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}
//WriteTo encode struct to buffer
func (st *SA) WriteTo(_os *jce.Buffer) error {
	var err error
	st.MakesureNotNil()

err = _os.Write_int32(st.A, 0)
if err != nil {
  return err
  }


	_ = err

	return nil
}
//WriteBlock encode struct
func (st *SA) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

func (st *SA) WupDecode(raw []byte) error{
	return st.ReadBlock(jce.NewReader(raw),0,true)
}

func (st *SA) WupEncode(_os *jce.Buffer) error{
	return st.WriteBlock(_os,0)
}

func (st *SA) WupTypeName() string {
	return "NFA.SA"}

`


func TestSample(t *testing.T) {
	str := "123456"
	//方法一
	data := []byte(str)
	has := md5.Sum(data)
	md5str1 := fmt.Sprintf("%x", has) //将[]byte转成16进制
	fmt.Println(md5str1)
}